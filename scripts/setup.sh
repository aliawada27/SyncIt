#!/bin/bash

# =============================================================================
# SYNCIT - SCRIPT DE CONFIGURATION RAPIDE
# =============================================================================

set -e

echo "üöÄ Configuration de SyncIt..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =============================================================================
# V√âRIFICATION DES PR√âREQUIS
# =============================================================================

print_status "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©. Veuillez l'installer depuis https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    print_error "Node.js version 18+ requis. Version actuelle: $(node --version)"
    exit 1
fi

print_success "Node.js $(node --version) d√©tect√©"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

print_success "npm $(npm --version) d√©tect√©"

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    print_warning "Docker n'est pas install√©. Certaines fonctionnalit√©s ne seront pas disponibles."
else
    print_success "Docker $(docker --version | cut -d' ' -f3 | cut -d',' -f1) d√©tect√©"
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_warning "Docker Compose n'est pas install√©. Certaines fonctionnalit√©s ne seront pas disponibles."
else
    print_success "Docker Compose $(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1) d√©tect√©"
fi

# =============================================================================
# INSTALLATION DES D√âPENDANCES
# =============================================================================

print_status "Installation des d√©pendances..."

# Installation des d√©pendances racines
print_status "Installation des d√©pendances racines..."
npm install

print_success "D√©pendances install√©es avec succ√®s"

# =============================================================================
# CONFIGURATION DES VARIABLES D'ENVIRONNEMENT
# =============================================================================

print_status "Configuration des variables d'environnement..."

if [ ! -f ".env" ]; then
    if [ -f "env.example" ]; then
        cp env.example .env
        print_success "Fichier .env cr√©√© depuis env.example"
        print_warning "Veuillez √©diter le fichier .env avec vos propres valeurs"
    else
        print_error "Fichier env.example introuvable"
    fi
else
    print_warning "Le fichier .env existe d√©j√†"
fi

# =============================================================================
# CONFIGURATION DE LA BASE DE DONN√âES
# =============================================================================

print_status "Configuration de la base de donn√©es..."

if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
    print_status "D√©marrage des services de base de donn√©es avec Docker..."
    
    # Cr√©er les r√©pertoires de donn√©es
    mkdir -p postgres-data redis-data
    
    # D√©marrer PostgreSQL et Redis
    docker-compose -f docker-compose.dev.yml up -d postgres redis
    
    # Attendre que les services soient pr√™ts
    print_status "Attente du d√©marrage des services..."
    sleep 10
    
    # G√©n√©rer le client Prisma
    print_status "G√©n√©ration du client Prisma..."
    npm run prisma:generate --workspace=apps/backend
    
    # Ex√©cuter les migrations
    print_status "Ex√©cution des migrations de base de donn√©es..."
    npm run prisma:migrate --workspace=apps/backend
    
    print_success "Base de donn√©es configur√©e avec succ√®s"
else
    print_warning "Docker non disponible. Veuillez configurer manuellement PostgreSQL et Redis"
    print_warning "Puis ex√©cuter: npm run prisma:generate --workspace=apps/backend"
    print_warning "Et: npm run prisma:migrate --workspace=apps/backend"
fi

# =============================================================================
# CONFIGURATION DU FRONTEND
# =============================================================================

print_status "Configuration du frontend..."

# V√©rifier si Expo CLI est install√© pour le mobile
if ! command -v expo &> /dev/null; then
    print_warning "Expo CLI n'est pas install√©. Pour l'app mobile, installez-le avec:"
    print_warning "npm install -g @expo/cli"
fi

# =============================================================================
# TESTS
# =============================================================================

print_status "Ex√©cution des tests de v√©rification..."

# Test du backend
print_status "Test du backend..."
if npm run typecheck --workspace=apps/backend; then
    print_success "Backend: TypeScript OK"
else
    print_warning "Backend: Probl√®mes TypeScript d√©tect√©s"
fi

# Test du frontend web
print_status "Test du frontend web..."
if npm run typecheck --workspace=apps/web; then
    print_success "Frontend Web: TypeScript OK"
else
    print_warning "Frontend Web: Probl√®mes TypeScript d√©tect√©s"
fi

# =============================================================================
# R√âSUM√â ET PROCHAINES √âTAPES
# =============================================================================

echo ""
echo "üéâ Configuration termin√©e!"
echo ""
echo "üìã Prochaines √©tapes:"
echo ""
echo "1. Configurez vos variables d'environnement dans le fichier .env"
echo "   - Cl√©s OAuth (Google, Facebook)"
echo "   - Cl√©s Firebase pour les notifications"
echo "   - Cl√©s API externes (Cloudinary, etc.)"
echo ""
echo "2. D√©marrez l'application en mode d√©veloppement:"
echo "   npm run dev                    # D√©marre tous les services"
echo "   npm run dev:backend           # Backend seulement"
echo "   npm run dev:web               # Frontend web seulement"
echo "   npm run dev:mobile            # App mobile seulement"
echo ""
echo "3. Ou utilisez Docker:"
echo "   npm run docker:dev            # Tous les services avec Docker"
echo ""
echo "4. Acc√©dez aux services:"
echo "   - Frontend Web:     http://localhost:3000"
echo "   - API Backend:      http://localhost:5000"
echo "   - GraphQL:          http://localhost:5000/graphql"
echo "   - App Mobile:       Expo Go + QR Code"
echo "   - Adminer (DB):     http://localhost:8080"
echo "   - Redis Insight:    http://localhost:8001"
echo ""
echo "5. Documentation:"
echo "   - README.md pour les d√©tails"
echo "   - apps/backend/docs/ pour l'API"
echo "   - packages/shared/src/ pour les types"
echo ""
echo "üîß Commandes utiles:"
echo "   npm run lint              # V√©rifier le code"
echo "   npm run test              # Ex√©cuter les tests"
echo "   npm run build             # Construire pour la production"
echo "   npm run prisma:studio     # Interface de gestion de la DB"
echo ""
print_success "SyncIt est pr√™t √† √™tre utilis√©! üöÄ" 