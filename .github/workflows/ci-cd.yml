# =============================================================================
# SYNCIT CI/CD PIPELINE
# =============================================================================

name: SyncIt CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # LINTING AND TYPE CHECKING
  # =============================================================================
  
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npm run typecheck

  # =============================================================================
  # BACKEND TESTS
  # =============================================================================
  
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: syncit_user
          POSTGRES_PASSWORD: syncit_password
          POSTGRES_DB: syncit_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npm run prisma:generate --workspace=apps/backend
        env:
          DATABASE_URL: postgresql://syncit_user:syncit_password@localhost:5432/syncit_test_db
          
      - name: Run database migrations
        run: npm run prisma:deploy --workspace=apps/backend
        env:
          DATABASE_URL: postgresql://syncit_user:syncit_password@localhost:5432/syncit_test_db
          
      - name: Run backend tests
        run: npm run test --workspace=apps/backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://syncit_user:syncit_password@localhost:5432/syncit_test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage/lcov.info
          flags: backend

  # =============================================================================
  # FRONTEND TESTS
  # =============================================================================
  
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build --workspace=apps/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000
          NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
          
      - name: Run frontend tests
        run: npm run test --workspace=apps/web

  # =============================================================================
  # E2E TESTS
  # =============================================================================
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: syncit_user
          POSTGRES_PASSWORD: syncit_password
          POSTGRES_DB: syncit_e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          npm run prisma:generate --workspace=apps/backend
          npm run prisma:deploy --workspace=apps/backend
        env:
          DATABASE_URL: postgresql://syncit_user:syncit_password@localhost:5432/syncit_e2e_db
          
      - name: Start backend server
        run: npm run dev:backend &
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://syncit_user:syncit_password@localhost:5432/syncit_e2e_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          BACKEND_PORT: 5000
          
      - name: Wait for backend
        run: npx wait-on http://localhost:5000/api/health
        
      - name: Start frontend server
        run: npm run dev:web &
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000
          NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
          
      - name: Wait for frontend
        run: npx wait-on http://localhost:3000
        
      - name: Run E2E tests
        run: npm run test:e2e --workspace=apps/web
        
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: apps/web/cypress/screenshots

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [backend, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Google Cloud Run
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          
  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Google Cloud Run
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          
  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify on Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'SyncIt deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 